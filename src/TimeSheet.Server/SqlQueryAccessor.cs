namespace TimeSheet
{
    internal static class SqlQueryAccessor
    {
        internal static readonly string CreateTables = "CREATE TABLE [users] (\r\n    [id]        INTEGER NOT NULL PRIMARY KEY,\r\n    [givenname] VARCHAR(50) NOT NULL,\r\n    [surname]   VARCHAR(50) NOT NULL,\r\n    [email]     VARCHAR(100) NOT NULL\r\n);\r\n\r\nCREATE TABLE [accounts] (\r\n    [name]      VARCHAR(255) NOT NULL PRIMARY KEY,\r\n    [password]  VARCHAR(255) NOT NULL,\r\n    [userid]    INTEGER NOT NULL,\r\n    FOREIGN KEY ([userid]) REFERENCES [users] ([id]) ON DELETE CASCADE\r\n);\r\n\r\nCREATE TABLE [apikeys] (\r\n    [id]        INT NOT NULL PRIMARY KEY,\r\n    [key]       VARCHAR(255) NOT NULL,\r\n    [name]      VARCHAR(255) NOT NULL,\r\n    [userid]    INTEGER NOT NULL,\r\n    [timestamp] DATETIME NOT NULL,\r\n    FOREIGN KEY ([userid]) REFERENCES [users] ([id]) ON DELETE CASCADE\r\n);\r\n\r\nCREATE TABLE [settings] (\r\n    [userid]    INTEGER NOT NULL,\r\n    [settingid] INTEGER NOT NULL,\r\n    [value]     TEXT NOT NULL,\r\n    PRIMARY KEY ([userid], [settingid]),\r\n    FOREIGN KEY ([userid]) REFERENCES [users] ([id]) ON DELETE CASCADE\r\n);\r\n\r\nCREATE TABLE [timesheets] (\r\n    [id]        INTEGER NOT NULL PRIMARY KEY,\r\n    [name]      VARCHAR(255) NOT NULL,\r\n    [userid]    INTEGER NOT NULL,\r\n    FOREIGN KEY ([userid]) REFERENCES [users] ([id]) ON DELETE CASCADE\r\n);\r\n\r\nCREATE TABLE [timesheetentries] (\r\n    [id]        INTEGER NOT NULL PRIMARY KEY,\r\n    [sheetid]   INTEGER NOT NULL,\r\n    [start]     DATETIME NOT NULL,\r\n    [end]       DATETIME NULL,\r\n    [target]    FLOAT NOT NULL,\r\n    FOREIGN KEY ([sheetid]) REFERENCES [timesheets] ([id]) ON DELETE CASCADE\r\n);\r\n\r\nCREATE TABLE [timesheetentrybreaks] (\r\n    [id]        INTEGER NOT NULL PRIMARY KEY,\r\n    [entryid]   INTEGER NOT NULL,\r\n    [start]     DATETIME NOT NULL,\r\n    [end]       DATETIME NULL,\r\n    FOREIGN KEY ([entryid]) REFERENCES [timesheetentries] ([id]) ON DELETE CASCADE\r\n);\r\n\r\nCREATE TABLE [metadata] (\r\n    [dbversion]     INTEGER NOT NULL,\r\n    [appversion]    VARCHAR(50) NOT NULL\r\n);\r\nINSERT INTO [metadata] ([dbversion], [appversion]) VALUES (2, \'0\');\r\n";
        internal static readonly string GetDbVersion = "SELECT [dbversion]\r\nFROM [metadata]\r\nLIMIT 1\r\n";
        internal static readonly string UpdateAppVersion = "UPDATE [metadata]\r\nSET [appversion] = @appversion\r\n";
        internal static readonly string MigrateV1ToV2 = "ALTER TABLE [timesheetentries] ADD COLUMN [target] FLOAT NULL;\r\n\r\nUPDATE [timesheetentries]\r\nSET [target] = (\r\n    SELECT s.value\r\n    FROM [timesheets] t\r\n    JOIN [settings] s ON s.userid = t.userid AND s.settingid = 1\r\n    WHERE t.id = timesheetentries.sheetid\r\n    UNION ALL\r\n    SELECT 8\r\n    LIMIT 1\r\n);\r\n\r\nPRAGMA writable_schema = 1;\r\nUPDATE SQLITE_MASTER SET SQL = \'CREATE TABLE [timesheetentries] ( [id] INTEGER NOT NULL PRIMARY KEY, [sheetid] INTEGER NOT NULL, [start] DATETIME NOT NULL, [end] DATETIME NULL, [target] FLOAT NOT NULL, FOREIGN KEY ([sheetid]) REFERENCES [timesheets] ([id]) ON DELETE CASCADE )\' WHERE NAME = \'timesheetentries\';\r\nPRAGMA writable_schema = 0;\r\n\r\nCREATE TABLE [metadata] (\r\n    [dbversion]     INTEGER NOT NULL,\r\n    [appversion]    VARCHAR(50) NOT NULL\r\n);\r\nINSERT INTO [metadata] ([dbversion], [appversion]) VALUES (2, \'0\');\r\n";
        internal static readonly string CreateApiKey = "INSERT INTO [apikeys] ([key], [name], [userid], [timestamp])\r\n    VALUES (@key, @name, @userid, @timestamp);\r\nSELECT last_insert_rowid();\r\n";
        internal static readonly string GetAllApiKeysOfUser = "SELECT [id], [name], [timestamp]\r\nFROM [apikeys]\r\nWHERE [userid] = @userid\r\n";
        internal static readonly string GetSetting = "SELECT [value]\r\nFROM [settings]\r\nWHERE [userid] = @userid AND [settingid] = @settingid\r\n";
        internal static readonly string GetSettings = "SELECT [settingid], [value]\r\nFROM [settings]\r\nWHERE [userid] = @userid\r\n";
        internal static readonly string GetUserIdOfApiKeyById = "SELECT [userid]\r\nFROM [apikeys]\r\nWHERE [id] = @id\r\n";
        internal static readonly string GetUserIdOfApiKeyByKey = "SELECT [userid]\r\nFROM [apikeys]\r\nWHERE [key] = @key\r\n";
        internal static readonly string RemoveApiKey = "DELETE FROM [apikeys]\r\nWHERE [id] = @id\r\n";
        internal static readonly string SetSetting = "INSERT OR REPLACE INTO [settings] ([userid], [settingid], [value])\r\n    VALUES (@userid, @settingid, @value);\r\n";
        internal static readonly string CreateEntry = "INSERT INTO [timesheetentries] ([sheetid], [start], [end], [target])\r\n    VALUES (@sheetid, @start, @end, @target);\r\nSELECT last_insert_rowid();\r\n";
        internal static readonly string CreateEntryBreak = "INSERT INTO [timesheetentrybreaks] ([entryid], [start], [end])\r\n    VALUES (@entryid, @start, @end);\r\nSELECT last_insert_rowid();\r\n";
        internal static readonly string DeleteEntry = "DELETE FROM [timesheetentries]\r\nWHERE [id] = @entryid\r\n";
        internal static readonly string DeleteEntryBreak = "DELETE FROM [timesheetentrybreaks]\r\nWHERE [id] = @breakid\r\n";
        internal static readonly string GetDefaultTimeSheetId = "INSERT OR IGNORE\r\nINTO [timesheets] ([id], [name], [userid])\r\n    VALUES (\r\n        (SELECT [id]\r\n\t     FROM [timesheets]\r\n\t     WHERE [userid] = @userid AND [name] = \'<default>\')\r\n      , \'<default>\'\r\n      , @userid);\r\n\r\nSELECT [id]\r\nFROM [timesheets]\r\nWHERE [userid] = @userid AND [name] = \'<default>\';\r\n";
        internal static readonly string GetEntries = "SELECT e.[id]\r\n     , e.[sheetid]\r\n     , e.[start]\r\n     , e.[end]\r\n     , b.[id]\r\n     , b.[start]\r\n     , b.[end]\r\n     , e.[target]\r\nFROM (\r\n\tSELECT *\r\n\tFROM [timesheetentries]\r\n\tWHERE [sheetid] = @sheetid\r\n\tORDER BY [start] {0}\r\n\tLIMIT @take OFFSET @skip\r\n) e\r\nLEFT JOIN [timesheetentrybreaks] b ON e.[id] = b.[entryid]\r\nORDER BY e.[start] {0}, b.[start] ASC\r\n";
        internal static readonly string GetEntry = "SELECT e.[id]\r\n     , e.[sheetid]\r\n     , e.[start]\r\n     , e.[end]\r\n     , b.[id]\r\n     , b.[start]\r\n     , b.[end]\r\n     , e.[target]\r\nFROM [timesheetentries] e\r\nLEFT JOIN [timesheetentrybreaks] b ON e.[id] = b.[entryid]\r\nWHERE e.[id] = @entryid\r\n";
        internal static readonly string GetEntryOfDay = "SELECT e.[id]\r\n     , e.[sheetid]\r\n     , e.[start]\r\n     , e.[end]\r\n     , b.[id]\r\n     , b.[start]\r\n     , b.[end]\r\n     , e.[target]\r\nFROM [timesheetentries] e\r\nLEFT JOIN [timesheetentrybreaks] b ON e.[id] = b.[entryid]\r\nWHERE e.[sheetid] = @sheetid AND date(e.[start]) = date(@day)\r\n";
        internal static readonly string GetLastOpenEntry = "SELECT e.[id]\r\n     , e.[sheetid]\r\n     , e.[start]\r\n     , e.[end]\r\n     , b.[id]\r\n     , b.[start]\r\n     , b.[end]\r\n     , e.[target]\r\nFROM [timesheetentries] e\r\nLEFT JOIN [timesheetentrybreaks] b ON e.[id] = b.[entryid]\r\nWHERE e.[sheetid] = @sheetid AND e.[end] IS NULL\r\nORDER BY e.[start] DESC\r\nLIMIT 1\r\n";
        internal static readonly string GetOvertime = "SELECT (\r\n\tSELECT SUM(julianday([end]) - julianday([start])) * 24 - SUM([target])\r\n\tFROM [timesheetentries]\r\n\tWHERE [sheetid] = @timesheetid AND [end] IS NOT NULL\r\n) - (\r\n\tSELECT SUM(julianday(b.[end]) - julianday(b.[start])) * 24\r\n\tFROM [timesheetentrybreaks] b\r\n\tJOIN [timesheetentries] e ON b.[entryid] = e.[id]\r\n\tWHERE e.[sheetid] = @timesheetid AND e.[end] IS NOT NULL AND b.[end] IS NOT NULL\r\n)\r\n";
        internal static readonly string HasEntryAtDay = "SELECT 1\r\nFROM [timesheetentries]\r\nWHERE [sheetid] = @sheetid AND date([start]) = date(@day) AND [id] != @excludedid\r\n";
        internal static readonly string UpdateEntry = "UPDATE [timesheetentries]\r\nSET [start] = @start,\r\n    [end] = @end,\r\n    [target] = @target\r\nWHERE [id] = @entryid\r\n";
        internal static readonly string UpdateEntryBreak = "UPDATE [timesheetentrybreaks]\r\nSET [start] = @start,\r\n    [end] = @end\r\nWHERE [id] = @breakid\r\n";
        internal static readonly string CreateUser = "INSERT INTO [users] ([givenname], [surname], [email])\r\n    VALUES (@givenname, @surname, @email);\r\n\r\nINSERT INTO [accounts] ([name], [password], [userid])\r\n\tVALUES (@username, @password, last_insert_rowid());\r\n\r\nSELECT [userid]\r\nFROM [accounts]\r\nWHERE rowid = last_insert_rowid();\r\n";
        internal static readonly string GetFirstAccountOfUser = "SELECT [name], [password]\r\nFROM [accounts]\r\nWHERE [userid] = @userid\r\nLIMIT 1\r\n";
        internal static readonly string GetUserById = "SELECT [id]\r\n     , [givenname]\r\n     , [surname]\r\n     , [email]\r\nFROM [users]\r\nWHERE [id] = @userid\r\n";
        internal static readonly string GetUserByUsername = "SELECT [u].[id]\r\n     , [u].[givenname]\r\n     , [u].[surname]\r\n     , [u].[email]\r\nFROM [accounts] AS [a]\r\nJOIN [users] AS [u] ON [a].[userid] = [u].[id]\r\nWHERE [a].[name] = @username COLLATE NOCASE\r\n";
        internal static readonly string GetUserPasswordHash = "SELECT [password]\r\nFROM [accounts]\r\nWHERE [name] = @username COLLATE NOCASE\r\n";
        internal static readonly string IsUsernameGiven = "SELECT 1\r\nFROM [accounts]\r\nWHERE [name] = @username COLLATE NOCASE\r\n";
        internal static readonly string UpdatePassword = "UPDATE [accounts]\r\nSET [password] = @password\r\nWHERE [name] = @name COLLATE NOCASE\r\n";
        internal static readonly string UpdateUser = "UPDATE [users]\r\nSET [givenname] = @givenname\r\n  , [surname] = @surname\r\n  , [email] = @email\r\nWHERE [id] = @id\r\n";
    }
}