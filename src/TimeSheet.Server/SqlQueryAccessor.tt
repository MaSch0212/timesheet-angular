<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#
	var result = new StringBuilder();
    result  .Append("namespace ").AppendLine("TimeSheet")
        .AppendLine("{")
            .Append("    internal static class ").AppendLine(Path.GetFileNameWithoutExtension(Host.TemplateFile))
        .AppendLine("    {");

    var scriptsPath = Path.GetDirectoryName(Host.TemplateFile);
	if (scriptsPath == null)
		throw new InvalidOperationException("directory of template file is null.");
    foreach (var script in Directory.GetFiles(scriptsPath, "*.sql", SearchOption.AllDirectories))
    {
        result
            .Append("        internal static readonly string ").Append(Path.GetFileNameWithoutExtension(script)).Append(" = \"").Append(StringCStyle(File.ReadAllText(script))).AppendLine("\";");
    }

    result
        .AppendLine("    }")
            .Append("}");

	Write(result.ToString());
#>
<#+
string StringCStyle(string value)
{
    var badChars = new Dictionary<char, string>
    {
        { '\r', "\\r" },
        { '\t', "\\t" },
        { '\"', "\\\"" },
        { '\'', "\\\'" },
        { '\\', "\\\\" },
        { '\0', "\\0" },
        { '\n', "\\n" },
        { '\u2028', "\\u2028" },
        { '\u2029', "\\u2029" },
    };

    return new string((from c1 in value.ToCharArray()
                       from c2 in badChars.ContainsKey(c1) ? badChars[c1].ToCharArray() : new [] {c1}
                       select c2).ToArray());
}
#>
